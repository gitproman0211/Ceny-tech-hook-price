{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\Button.svelte",
    "..\\Coin.svelte",
    "..\\ui\\Currency.svelte",
    "..\\ui\\Detail.svelte",
    "..\\ui\\Thead.svelte",
    "..\\ui\\change.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { countStore, setValue } from \"./model\";\n</script>\n\n<style>\n\tbutton {\n\t  background: #ff3e00;\n\t  color: white;\n\t  border: none;\n\t  padding: 8px 12px;\n\t  border-radius: 2px;\n\t}\n</style>\n\n{ $countStore }\n<button on:click={setValue}>\n  Clicked \n</button>",
    "<script>\r\n import { createEventDispatcher } from \"svelte\";\r\n const dispatch = createEventDispatcher();\r\n\r\n import { formatCoin } from \"./lib\";\r\n export let data;\r\n\r\n let me = formatCoin(data);\r\n</script>\r\n<style>\r\n  .bg {\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    background-size: 30px 30px;\r\n    height: 40px;\r\n  }\r\n</style>\r\n<tr on:click={()=>dispatch(\"view\",me)}>\r\n<td class=\"bg\" style=\"background-image:url('{me.img}')\"/>\r\n  <td>{me.name}</td>\r\n  <td>{data.value.length&&data.value[0].amount}</td>\r\n  <td>{me.usd}</td>\r\n  \r\n</tr>\r\n\r\n",
    "<script>\r\n  import { getCurrency, currencyStore } from \"../stores/currency\";\r\n\r\n  getCurrency();\r\n\r\n  let usdValue = 1;\r\n  let zarValue =\r\n    $currencyStore.loading == false &&\r\n    $currencyStore.data.zar.toFixed(2) * usdValue;\r\n\r\n  const onChangeUSD = ({ target: { value } }) => {\r\n    usdValue = (value / $currencyStore.data.zar).toFixed(2);\r\n  };\r\n\r\n  const onChangeZar = ({ target: { value } }) => {\r\n    zarValue = (value * $currencyStore.data.zar).toFixed(2);\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .currency {\r\n    display: grid;\r\n    grid-gap: 5px;\r\n    grid-template-columns: repeat(2, 1fr);\r\n\r\n    border: 1px solid #eeebbb;\r\n    border-radius: 10px;\r\n    padding: 10px;\r\n    margin-bottom: 5px;\r\n  }\r\n</style>\r\n\r\n<div class=\"currency\">\r\n <div>\r\n  <label>Zar = R{$currencyStore.loading == false &&$currencyStore.data.zar.toFixed(2)}</label>\r\n  <input class=\"input is-small\" value={zarValue}  type=\"number\" min=\"0.01\" step=\"0.01\" on:input={onChangeUSD}/>\r\n </div>\r\n\r\n  <div>\r\n  <label>USD  = ${$currencyStore.loading == false &&$currencyStore.data.usd}</label>\r\n  <input class=\"input is-small\" value={usdValue} type=\"number\" min=\"0.01\" step=\"0.01\" on:input={onChangeZar}/>\r\n </div>\r\n</div>\r\n",
    "<script>\r\n  import { currencyStore } from \"../stores/currency\";\r\n  let value = 1;\r\n  export let selected;\r\n\r\n  const formatValue = data => {\r\n    if (data == \"\" || isNaN(data)) {\r\n      return 1;\r\n    }\r\n    return parseFloat(data);\r\n  };\r\n\r\n  $: amount = formatValue(value);\r\n</script>\r\n\r\n<style>\r\n  .view {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n</style>\r\n\r\n <div>\r\n <input bind:value class=\"input is-small\" type=\"number\" min=\"0.01\" placeholder=\"Enter amount....\">\r\n  <div class=\"view\">\r\n  <small>R {selected&&(selected.zar * amount).toFixed(2)}</small>\r\n  <small>$ {selected&&(selected.usd * amount).toFixed(2)}</small>\r\n  </div>\r\n\r\n  <!-- <div class=\"view\">\r\n    <small>R {selected&&(amount*$currencyStore.data.zar).toFixed(8)}</small>\r\n  <small>$ {selected&&(amount*$currencyStore.data.usd).toFixed(8)}</small>\r\n  </div> -->\r\n </div>",
    "<style>\r\n  th {\r\n    text-align: center;\r\n  }\r\n</style>\r\n\r\n<thead>\r\n\t<tr>\r\n\t\t<th>fff</th>\r\n\t\t<th>ffff</th>\r\n\t\t<th>fff</th>\r\n\t\t<th>jsdjjsjds</th>\r\n\t</tr>\r\n</thead>",
    "<script>\r\n  let value = 1;\r\n  let value2 = 1;\r\n  export let selected;\r\n\r\n  const formatValue = data => {\r\n    if (data == \"\" || isNaN(data)) {\r\n      return 1;\r\n    }\r\n    return parseFloat(data);\r\n  };\r\n\r\n  const formatCurrency = data => {\r\n    return selected && data.toFixed(2);\r\n  };\r\n\r\n  $: amount = formatValue(value);\r\n  $: amount2 = formatValue(value2);\r\n</script>\r\n\r\n<style>\r\n  .view {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n</style>\r\n\r\n <div>\r\n <input bind:value class=\"input is-small\" type=\"number\" min=\"0.01\" placeholder=\"Enter amount....\">\r\n  <div class=\"view\">\r\n  <small>R {formatCurrency(selected.zar * amount)}</small>\r\n  <small>$ {formatCurrency(selected.usd * amount)}</small>\r\n  </div>\r\n\r\n   <input bind:value={value2} class=\"input is-small\" type=\"number\" min=\"0.01\" placeholder=\"Enter amount....\">\r\n  <div class=\"view\">\r\n  <small>R {formatCurrency(selected.zar * amount2)}</small>\r\n  <small>$ {formatCurrency(selected.usd * amount2)}</small>\r\n  </div>\r\n\r\n<h3>Profit</h3>\r\n\r\n<p  class=\"view\">\r\n <label>\r\n  {value -value2}\r\n </label>\r\n <label>\r\n R {formatCurrency((selected.zar * amount)-(selected.zar * amount2))}\r\n </label>\r\n</p>\r\n  \r\n\r\n </div>"
  ],
  "names": [],
  "mappings": "AAKC,MAAM,eAAC,CAAC,AACN,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,aAAa,CAAE,GAAG,AACpB,CAAC;ACDA,GAAG,eAAC,CAAC,AACH,iBAAiB,CAAE,SAAS,CAC5B,mBAAmB,CAAE,MAAM,CAC3B,eAAe,CAAE,IAAI,CAAC,IAAI,CAC1B,MAAM,CAAE,IAAI,AACd,CAAC;ACKD,SAAS,eAAC,CAAC,AACT,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,GAAG,CACb,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAErC,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,GAAG,AACpB,CAAC;ACbD,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,AACrB,CAAC;ACnBD,EAAE,eAAC,CAAC,AACF,UAAU,CAAE,MAAM,AACpB,CAAC;ACkBD,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,AACrB,CAAC"
}